services:
  b2c-back:
    extends:
      file: compose/b2c/back_common.yml
      service: b2c-back-common
    depends_on:
      postgres:
        condition: service_started
      b2c-back-init:
        condition: service_completed_successfully
    entrypoint: ["yarn", "start"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.b2cback.rule=Host(`${PROJECT_HOSTNAME:?}`) && PathPrefix(`${B2C_BACKEND_SUB_ROUTE:?}`)
      - traefik.http.routers.b2cback.entrypoints=http
      - traefik.http.routers.b2cback.middlewares=b2cback
      - traefik.http.middlewares.b2cback.replacepathregex.regex=${B2C_BACKEND_SUB_ROUTE:?}(/|$$)(.*)
      - traefik.http.middlewares.b2cback.replacepathregex.replacement=/$$2
      - traefik.http.routers.b2cback_s.rule=Host(`${PROJECT_HOSTNAME:?}`) && PathPrefix(`${B2C_BACKEND_SUB_ROUTE:?}`)
      - traefik.http.routers.b2cback_s.middlewares=b2cback_s
      - traefik.http.middlewares.b2cback_s.replacepathregex.regex=${B2C_BACKEND_SUB_ROUTE:?}(/|$$)(.*)
      - traefik.http.middlewares.b2cback_s.replacepathregex.replacement=/$$2
      - traefik.http.routers.b2cback_s.entrypoints=https
      - traefik.http.routers.b2cback_s.tls=true
    restart: always
    networks:
      - backend
      - frontend
