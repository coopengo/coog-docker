services:
  b2c-front:
    image: ${IMAGE_REGISTRY:?}/${IMAGE_NAME_B2C_FRONT:?}:${IMAGE_VERSION_B2C_FRONT:?}
    env_file:
      - env/b2c-front.env
    depends_on:
      - b2c-back
    environment:
      - B2C_FRONT_PATH_PREFIX=${B2C_FRONT_PATH_PREFIX:?}
      - API_URL=${B2C_FRONTEND_BUILD_INTERNAL_API_URL:?}
      - GATSBY_API_URL=${B2C_BACKEND_EXTERNAL_URL:?}
      - ENABLE_GATSBY_REFRESH_ENDPOINT=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.b2cfront.rule=Host(`${PROJECT_HOSTNAME:?}`) && PathPrefix(`${B2C_FRONT_PATH_PREFIX:?}`)
      - traefik.http.routers.b2cfront.entrypoints=http
      - traefik.http.routers.b2cfront.middlewares=b2cfront
      - traefik.http.middlewares.b2cfront.replacepathregex.regex=${B2C_FRONT_PATH_PREFIX:?}(/|$$)(.*)
      - traefik.http.middlewares.b2cfront.replacepathregex.replacement=/$$2
      - traefik.http.routers.b2cfront_s.rule=Host(`${PROJECT_HOSTNAME:?}`) && PathPrefix(`${B2C_FRONT_PATH_PREFIX:?}`)
      - traefik.http.routers.b2cfront_s.middlewares=b2cfront_s
      - traefik.http.middlewares.b2cfront_s.replacepathregex.regex=${B2C_FRONT_PATH_PREFIX:?}(/|$$)(.*)
      - traefik.http.middlewares.b2cfront_s.replacepathregex.replacement=/$$2
      - traefik.http.routers.b2cfront_s.entrypoints=https
      - traefik.http.routers.b2cfront_s.tls=true
    restart: always
    networks:
      - backend
      - frontend
